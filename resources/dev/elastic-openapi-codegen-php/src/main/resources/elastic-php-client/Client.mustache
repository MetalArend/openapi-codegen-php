<?php

declare(strict_types=1);

namespace {{invokerPackage}};

use Elastic\OpenApi\Codegen\AbstractClient;

{{#clientClassQualifier}}{{{.}}} {{/clientClassQualifier}}class {{clientClass}} extends AbstractClient
{{=<% %>=}}{<%#apiInfo%><%={{ }}=%>{{#apis}}{{#operations}}{{#operation}}
    /**
{{#summary}}
     * {{.}}
     *
{{/summary}}
{{#notes}}
     * {{.}}
     *
{{/notes}}
{{#externalDocs}}
     * Documentation: {{url}}
     *
{{/externalDocs}}
{{#queryParams.0}}
     * @param array<string, mixed> $query
{{^bodyParams.0}}
     *
{{/bodyParams.0}}
{{/queryParams.0}}
{{#bodyParams.0}}
     * @param array<string, mixed> $body
{{^queryParams.0}}
     *
{{/queryParams.0}}
{{/bodyParams.0}}
     * @return array<mixed>
     */
    {{vendorExtensions.x-operation-scope}} function {{operationId}}({{#pathParams}}{{dataType}} ${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/pathParams}}{{#queryParams.0}}{{#pathParams.0}}, {{/pathParams.0}}array $query = []{{/queryParams.0}}{{#bodyParams.0}}, array $body = []{{/bodyParams.0}}) : array
    {
        {{#pathParams.0}}
        $path = [
            {{#pathParams}}
            '{{baseName}}' => ${{paramName}},
            {{/pathParams}}
        ];

        {{/pathParams.0}}
        return $this->performRequest(
            $this
                ->endpoint('{{classname}}')
                {{#allParams.0}}
                ->setParams({{#pathParams.0}}{{^queryParams.0}}$path){{/queryParams.0}}{{/pathParams.0}}{{^pathParams.0}}{{#queryParams.0}}$query){{/queryParams.0}}{{/pathParams.0}}{{#pathParams.0}}{{#queryParams.0}}array_merge($path, $query)){{/queryParams.0}}{{/pathParams.0}}
                {{/allParams.0}}
                {{#bodyParams.0}}
                ->setBody($body)
                {{/bodyParams.0}}
        );
    }
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}
